#!/usr/bin/env Rscript
#
# INSTALL_TEST_R, R test script for install non-reg suite
# Copyright (C) 2017-2021 Xavier Delaruelle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##########################################################################

args = commandArgs(trailingOnly=TRUE)

if (length(args) != 2) {
# print usage message
   stop('Usage: install_test_r initfile command[:command]')
}

initfile <- args[1]
cmdlist <- strsplit(args[2], ':')[[1]]
# empty command list, means one empty command
if (length(cmdlist) == 0) {
   cmdlist <- list('')
}

if (file.access(initfile, 4) != 0) {
   stop('Cannot read ', initfile)
}

# source module init file
source(initfile)

# execute command list
code <- 0
runml <- FALSE
for (cmd in cmdlist) {
   # call ml procedure instead of module
   if (cmd == 'ml') {
      runml <- TRUE
      ret <- TRUE
   # if command equals to NOARG string, means call with no arg passed
   } else if (cmd == 'NOARG') {
      if (identical(runml, FALSE)) {
         ret <- do.call(module, list())
      } else {
         ret <- do.call(ml, list())
      }
   } else {
      # append ',' to take into account eventual empty string arg
      if (identical(runml, FALSE)) {
         ret <- do.call(module, as.list(strsplit(paste0(cmd,',',collapse='')[[1]], ',')[[1]]))
      } else {
         ret <- do.call(ml, as.list(strsplit(paste0(cmd,',',collapse='')[[1]], ',')[[1]]))
      }
   }
   if (identical(ret, FALSE)) {
      code <- 1
   } else if (!(identical(ret, TRUE))) {
      print(ret)
   }
}

if (code != 0) {
   stop()
}

# vim:set tabstop=3 shiftwidth=3 expandtab autoindent:
